import { useCallback, useState } from 'react'
import { useEffect } from 'react';
import { debounce } from "lodash"; 
import axios from 'axios';
import { useCategory } from "./useCategory";
import { useSearchParams } from 'react-router-dom'
const Category = () => {
    // const[categoryProduct, setCategoryProduct] = useState([]);
    const { setCategoryProduct,  setCatgLoading, setCatgError  } = useCategory();
    const [selectedCategoryValue, setSelectedCategoryValue] = useState('');
    const [searchParams, setSearchParams] = useSearchParams()
    const categoryParams = searchParams.get('category') || "all";


    const GetCategory = useCallback( async (categoryValue) => {
        if(!categoryValue) return;
        setCatgLoading(true);
        setTimeout(async () => {
             try{
          let url = (`https://dummyjson.com/products/category/${categoryValue}`)
          if(categoryValue === 'AllProduct'){
             url = ('https://dummyjson.com/products?limit=100')
          }
          let catg = await axios.get(url)
          setCategoryProduct(catg.data?.products)
      }catch(err){
        setCatgError(`Error: ${err.message}`);
      }finally{
        setCatgLoading(false);
      }
        },1000)
     
    // eslint-disable-next-line react-hooks/exhaustive-deps
    },[categoryParams]) ;

    

    const handleChange = (event) => {
        const selectedCategory = event.target.value
        setSearchParams({category: selectedCategory})
    }

    useEffect(() => {
        const debouncedCategory = debounce((value) => {
            GetCategory(value);
        }, 300);

        if (categoryParams) {
          setSelectedCategoryValue(categoryParams)
            debouncedCategory(categoryParams);
        }

        return () => debouncedCategory.cancel();
    }, [categoryParams, GetCategory]);





    //Note something is fishhy even withiut the oprop get propduct the page still load how come lookig through that next ....
    //make category to display flx
    //add some seach bar
  //tuseday march 25 2025
  // to move dashboard and othe auth to app and creat genral nav bar
  // wednesday march 26 2025
  // continue with cart to return added product and display total and discount 
  // thursday march 27 2025
  // addd tatl price and save current count to locastorage add csss don...

// my product.jsx new return
    <Navbar GetProduct= {GetProduct} />
    <div>
         { Catgloading && ( <div className="Lcont"><div className="loader"></div></div>)} 
     </div>
       {error || Catgerror ? (<p className="Error-message">{error} <img src={ErrorImage} alt="errorImage" style={{width:'100px',height:'100px', objectFit:'cover'}} /></p> ) : loading ? ( 
     <div className="Lcont">
       <div className="loader"></div>
     </div>
     ) : categoryParams === 'AllProduct' || !categoryParams ?(
     <div className="productContainer">
       {products.map((product) => (
         <Link
           key={product.id}
           // onClick={() => navigate("/productdetail", { state: { product } })}
           to={`/productdetail/${product.id}`}
           className="products"
         >
           <img src={product.thumbnail} alt={product.title} />
           <div className="product-info">
             <p>{product.title}</p>
             <p>${(product.price * (1 - product.discountPercentage / 100)).toFixed(2)}</p>
             <p>${product.price.toFixed(2)}</p>
           </div>
           <button>Add to cart</button>
         </Link>
       ))}
     </div>
      ):  (
       <div className="category-container">
         {categoryProduct.map((selectedCartg) => (
           <div className="products" key={selectedCartg.id}>
              <img src={selectedCartg.thumbnail} alt={selectedCartg.title} />
              <div className="product-info">
                <p>{selectedCartg.title}</p>
                <p>${(selectedCartg.price * (1 - selectedCartg.discountPercentage / 100)).toFixed(2)}</p>
                <p>${selectedCartg.price.toFixed(2)}</p>
              </div>
              <button>Add to cartüèØ</button>
           </div>
       ))}
       </div>
     ) }

    //  my product.jsx old return
    <Navbar GetProduct= {GetProduct} />
    <div>
         { Catgloading && ( <div className="Lcont"><div className="loader"></div></div>)} 
     </div>
       {error || Catgerror ? (<p className="Error-message">{error} <img src={ErrorImage} alt="errorImage" style={{width:'100px',height:'100px', objectFit:'cover'}} /></p> ) : loading ? ( 
     <div className="Lcont">
       <div className="loader"></div>
     </div>
     ) : categoryProduct? (
       <div className="category-container">
         {categoryProduct.map((selectedCartg) => (
           <div className="products" key={selectedCartg.id}>
              <img src={selectedCartg.thumbnail} alt={selectedCartg.title} />
              <div className="product-info">
                <p>{selectedCartg.title}</p>
                <p>${(selectedCartg.price * (1 - selectedCartg.discountPercentage / 100)).toFixed(2)}</p>
                <p>${selectedCartg.price.toFixed(2)}</p>
              </div>
              <button>Add to cartüèØ</button>
           </div>
       ))}
       </div>
     ) : (
     <div className="productContainer">
       {products.map((product) => (
         <Link
           key={product.id}
           // onClick={() => navigate("/productdetail", { state: { product } })}
           to={`/productdetail/${product.id}`}
           className="products"
         >
           <img src={product.thumbnail} alt={product.title} />
           <div className="product-info">
             <p>{product.title}</p>
             <p>${(product.price * (1 - product.discountPercentage / 100)).toFixed(2)}</p>
             <p>${product.price.toFixed(2)}</p>
           </div>
           <button>Add to cart</button>
         </Link>
       ))}
     </div>
      )}
     
//
  
return (
  <div className="product-page-content">
    <Navbar GetProduct={GetProduct} />
    <SearchBar onSearch={handleSearch} />
    <div>
      {Catgloading && (
        <div className="Lcont">
          <div className="loader"></div>
        </div>
      )}
    </div>
    {error || Catgerror ? (
      <p className="Error-message">
        {error}
        <img
          src={ErrorImage}
          alt="errorImage"
          style={{ width: "100px", height: "100px", objectFit: "cover" }}
        />
      </p>
    ) : loading ? (
      <div className="Lcont">
        <div className="loader"></div>
      </div>
    ) : categoryParams === "AllProduct" || !categoryParams ? (
      <div className="productContainer">
        {products.map((product) => (
          <Link
            key={product.id}
            // onClick={() => navigate("/productdetail", { state: { product } })}
            to={`/productdetail/${product.id}`}
            className="products"
          >
            <img src={product.thumbnail} alt={product.title} />
            <div className="product-info">
              <p>{product.title}</p>
              <p> $ {( product.price * (1 - product.discountPercentage / 100) ).toFixed(2)} </p>
              <p>${product.price.toFixed(2)}</p>
            </div>
            <button>Add to cart</button>
          </Link>
        ))}
      </div>
    ) : (
      <div className="category-container">
        {categoryProduct.map((selectedCartg) => (
          <div className="products" key={selectedCartg.id}>
            <img src={selectedCartg.thumbnail} alt={selectedCartg.title} />
            <div className="product-info">
              <p>{selectedCartg.title}</p>
              <p>${( selectedCartg.price *(1 - selectedCartg.discountPercentage / 100) ).toFixed(2)}</p>
              <p>${selectedCartg.price.toFixed(2)}</p>
            </div>
            <button>Add to cartüèØ</button>
          </div>
        ))}
      </div>
    )}
  </div>
);